{"name":"Case","tagline":"String case utitility: convert, identify, flip, extend","body":"### Case: An extensible utility to convert, identify, and flip string case.\r\n\r\nDownload: [Case.min.js][prod]  or  [Case.js][dev]  \r\nBower: `bower install Case`  (note the big 'C')  \r\n[NPM][npm]: `npm install case`  (little 'c' due to NPM restrictions)  \r\n\r\n[prod]: https://raw.github.com/nbubna/Case/master/dist/Case.min.js\r\n[dev]: https://raw.github.com/nbubna/Case/master/dist/Case.js\r\n[npm]: https://npmjs.org/package/case\r\n\r\n## Documentation\r\nEach of the following functions will first \"undo\" previous case manipulations\r\nbefore applying the desired case to the given string.\r\n\r\n```javascript\r\nCase.upper('foo_bar')                       -> 'FOO BAR'\r\nCase.lower('fooBar')                        -> 'foo bar'\r\nCase.snake('Foo bar!')                      -> 'foo_bar'\r\nCase.squish('foo.bar')                      -> 'FooBar'\r\nCase.camel('foo, bar')                      -> 'fooBar'\r\nCase.constant('Foo-Bar')                    -> 'FOO_BAR'\r\nCase.title('foo v. bar')                    -> 'Foo v. Bar'\r\nCase.capital('foo_v_bar')                   -> 'Foo V Bar'\r\nCase.sentence('\"foo!\" said bar', ['Bar'])   -> '\"Foo!\" said Bar'\r\n```\r\n\r\n`sentence(str, names)` accepts an array of proper names that should be capitalized,\r\nregardless of location in the sentence.  This function is specialized, but useful\r\nwhen dealing with input generated with capslock on (i.e. everything my grandma types).\r\n\r\nThere are three additional functions:\r\n* `of(str)`: identifies the case of a string, returns undefined if it doesn't match a known type\r\n* `flip(str)`: reverses the case of letters, no other changes\r\n* `type(name, fn)`: extends Case with a new case type\r\n\r\n```javascript\r\nCase.of('foo')          -> 'lower'\r\nCase.of('foo_bar')      -> 'snake'\r\nCase.of('Foo v Bar')    -> 'title'\r\nCase.of('foo_ Bar')     -> undefined\r\n\r\nCase.flip('FlipMe')     -> 'fLIPmE'\r\nCase.flip('TEST THIS!') -> 'test this!'\r\n\r\nCase.type('bang', function(s) {\r\n    return Case.upper(s, '!')+'!';\r\n});\r\nCase.bang('bang')       -> 'BANG!'\r\nCase.of('TEST!THIS!')   -> 'bang'\r\n```\r\n\r\nRegistering functions via `type()` means `Case.of` supports them automatically.\r\n\r\nOh, did you notice that little `Case.upper(s, '!')`?\r\nYeah, `upper()` and `lower()` accept a second \"fill\" argument\r\nthat will replace any characters which are not letters or numbers.\r\nIt's handy, sometimes. :)\r\n\r\n\r\n## Release History\r\n* 2013-06-10 v1.0.0 (public, initial)\r\n\r\n[v1.0.0]: https://github.com/nbubna/store/tree/1.0.0\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}